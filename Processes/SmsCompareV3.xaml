<Activity mc:Ignorable="sap sap2010" x:Class="SmsCompareV2" this:SmsCompareV2.in_Folder="D:\\TOPUP_BIDV\\11_2022\\FinalSMS" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_SoPhu" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Kho" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Folder" Type="InArgument(x:String)" />
  </x:Members>
  <this:SmsCompareV2.in_SoPhu>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_SoPhu>
  <this:SmsCompareV2.in_Kho>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_Kho>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>844.8,6296</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="35">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities.Business.Filter</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="58">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SmsCompareV2" sap:VirtualizedContainerService.HintSize="786.4,6231.2" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="sophu" />
      <Variable x:TypeArguments="sd:DataTable" Name="kho" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="724,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">DateTime.Now.ToString("hh:mm:ss") + ": Starting compare SMS..."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="724,1134.4" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_17" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="529.6,1038.4" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_14" ResizeWindow="None">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,759.2" sap2010:WorkflowViewState.IdRef="Sequence_65">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="433.6,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_9" SheetName="SoPhu" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_234">in_SoPhu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="433.6,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_10" SheetName="Kho" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_235">in_Kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="433.6,90.4" sap2010:WorkflowViewState.IdRef="ClearDataTable_3">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_61">in_SoPhu</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="433.6,90.4" sap2010:WorkflowViewState.IdRef="ClearDataTable_4">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_62">in_Kho</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <ueab:DeleteSheetX DisplayName="Delete Sheet" sap:VirtualizedContainerService.HintSize="433.6,100" sap2010:WorkflowViewState.IdRef="DeleteSheetX_2">
                    <ueab:DeleteSheetX.Sheet>
                      <InArgument x:TypeArguments="ue:ISheetRef">
                        <CSharpValue x:TypeArguments="ue:ISheetRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_343">Excel.Sheet["Sheet1"]</CSharpValue>
                      </InArgument>
                    </ueab:DeleteSheetX.Sheet>
                  </ueab:DeleteSheetX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_309" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS.xlsx"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ueab:ExcelProcessScopeX>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="724,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_182">"Write succeed."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="724,62.4" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_16" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" AutoSave="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="539.2,1284" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_13" ResizeWindow="None" TemplatePath="D:\\TOPUP_BIDV\\11_2022\\FinalSMS\\T11_2022_SMS.xlsx" UseTemplate="True">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="505.6,981.6" sap2010:WorkflowViewState.IdRef="Sequence_61">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="lastRow" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:SortX DisplayName="Sort Range" HasHeaders="True" sap:VirtualizedContainerService.HintSize="443.2,232" sap2010:WorkflowViewState.IdRef="SortX_1">
                    <ueab:SortX.Body>
                      <ActivityAction>
                        <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_62">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ueab:SortColumnX ColumnName="DateTime" DisplayName="Sort By Column" sap:VirtualizedContainerService.HintSize="382.4,72" sap2010:WorkflowViewState.IdRef="SortColumnX_1" SortDirection="Ascending" />
                        </Sequence>
                      </ActivityAction>
                    </ueab:SortX.Body>
                    <ueab:SortX.Range>
                      <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_217">Excel.Sheet["SoPhu"]</CSharpValue>
                      </InArgument>
                    </ueab:SortX.Range>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ueab:SortX>
                  <ueab:SortX DisplayName="Sort Range" HasHeaders="True" sap:VirtualizedContainerService.HintSize="443.2,232" sap2010:WorkflowViewState.IdRef="SortX_2">
                    <ueab:SortX.Body>
                      <ActivityAction>
                        <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_63">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ueab:SortColumnX ColumnName="DATE" DisplayName="Sort By Column" sap:VirtualizedContainerService.HintSize="382.4,72" sap2010:WorkflowViewState.IdRef="SortColumnX_2" SortDirection="Ascending" />
                        </Sequence>
                      </ActivityAction>
                    </ueab:SortX.Body>
                    <ueab:SortX.Range>
                      <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_218">Excel.Sheet["Kho"]</CSharpValue>
                      </InArgument>
                    </ueab:SortX.Range>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ueab:SortX>
                  <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="443.2,69.6" sap2010:WorkflowViewState.IdRef="ExcelReadRange_6" SheetName="SoPhu">
                    <ui:ExcelReadRange.DataTable>
                      <OutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_52">sophu</CSharpReference>
                      </OutArgument>
                    </ui:ExcelReadRange.DataTable>
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="443.2,69.6" sap2010:WorkflowViewState.IdRef="ExcelReadRange_7" SheetName="Kho">
                    <ui:ExcelReadRange.DataTable>
                      <OutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_54">kho</CSharpReference>
                      </OutArgument>
                    </ui:ExcelReadRange.DataTable>
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ueab:SaveExcelFileX DisplayName="Save Excel File" sap:VirtualizedContainerService.HintSize="443.2,95.2" sap2010:WorkflowViewState.IdRef="SaveExcelFileX_3">
                    <ueab:SaveExcelFileX.Workbook>
                      <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                        <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_227">Excel</CSharpValue>
                      </InArgument>
                    </ueab:SaveExcelFileX.Workbook>
                  </ueab:SaveExcelFileX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_310" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS.xlsx"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ueab:ExcelProcessScopeX>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="724,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Info">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_308">"Sort succeed."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="724,4404" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_18" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" AutoSave="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="690.4,4308" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_12" ResizeWindow="None" TemplatePath="D:\\Files\\FinalSMS\\T11_2022_SMS.xlsx" UseTemplate="True">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="656.8,4005.6" sap2010:WorkflowViewState.IdRef="Sequence_57">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="lastRowSoPhu" />
                    <Variable x:TypeArguments="x:Int32" Name="lastRowKho" />
                    <Variable x:TypeArguments="x:Int32" Name="curRow" />
                    <Variable x:TypeArguments="x:Int32" Name="lastRow" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="594.4,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_11" SheetName="Final" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_236">sophu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <Delay Duration="00:00:01" sap:VirtualizedContainerService.HintSize="594.4,98.4" sap2010:WorkflowViewState.IdRef="Delay_4" />
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="594.4,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_12" SheetName="Final" StartingCell="W1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_238">kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="594.4,90.4" sap2010:WorkflowViewState.IdRef="ClearDataTable_1">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_59">sophu</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="594.4,90.4" sap2010:WorkflowViewState.IdRef="ClearDataTable_2">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_60">kho</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <Delay Duration="00:00:01" sap:VirtualizedContainerService.HintSize="594.4,98.4" sap2010:WorkflowViewState.IdRef="Delay_5" />
                  <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="10" ColumnName="A" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="594.4,317.6" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_6" LastRowOffset="0">
                    <ueab:FindFirstLastDataRowX.LastRowIndex>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_51">lastRowSoPhu</CSharpReference>
                      </OutArgument>
                    </ueab:FindFirstLastDataRowX.LastRowIndex>
                    <ueab:FindFirstLastDataRowX.Range>
                      <InArgument x:TypeArguments="ue:IReadRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_232">Excel.Sheet["Final"]</CSharpValue>
                      </InArgument>
                    </ueab:FindFirstLastDataRowX.Range>
                  </ueab:FindFirstLastDataRowX>
                  <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="10" ColumnName="W" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="594.4,317.6" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_9" LastRowOffset="0">
                    <ueab:FindFirstLastDataRowX.LastRowIndex>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_72">lastRowKho</CSharpReference>
                      </OutArgument>
                    </ueab:FindFirstLastDataRowX.LastRowIndex>
                    <ueab:FindFirstLastDataRowX.Range>
                      <InArgument x:TypeArguments="ue:IReadRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_268">Excel.Sheet["Final"]</CSharpValue>
                      </InArgument>
                    </ueab:FindFirstLastDataRowX.Range>
                  </ueab:FindFirstLastDataRowX>
                  <Assign sap:VirtualizedContainerService.HintSize="594.4,69.6" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_73">lastRow</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">
                        <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_269">Math.Max(lastRowSoPhu, lastRowKho)</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="594.4,69.6" sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_76">curRow</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">2</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:InterruptibleWhile CurrentIndex="{x:Null}" DisplayName="While" sap:VirtualizedContainerService.HintSize="594.4,2000" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_3">
                    <ui:InterruptibleWhile.Body>
                      <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="559.2,1823.2" sap2010:WorkflowViewState.IdRef="Sequence_76">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="sd:DataTable" Name="tempDt" />
                          <Variable x:TypeArguments="x:Int32" Name="isLeft" />
                          <Variable x:TypeArguments="x:Int32" Name="numDel" />
                        </Sequence.Variables>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="496.8,148.8" sap2010:WorkflowViewState.IdRef="FillRangeX_9">
                          <ueab:FillRangeX.DestinationRange>
                            <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                              <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_320">Excel.Sheet["Final"].Range["U" + curRow + ":U" + lastRow]</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.DestinationRange>
                          <ueab:FillRangeX.Value>
                            <InArgument x:TypeArguments="x:Object">
                              <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_321">"=T"+ curRow + "-AA" + curRow</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.Value>
                        </ueab:FillRangeX>
                        <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="496.8,148.8" sap2010:WorkflowViewState.IdRef="FillRangeX_10">
                          <ueab:FillRangeX.DestinationRange>
                            <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                              <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_322">Excel.Sheet["Final"].Range["V" + curRow + ":V" + lastRow]</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.DestinationRange>
                          <ueab:FillRangeX.Value>
                            <InArgument x:TypeArguments="x:Object">
                              <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_323">"=F"+ curRow + "-X" + curRow</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.Value>
                        </ueab:FillRangeX>
                        <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="496.8,69.6" sap2010:WorkflowViewState.IdRef="ExcelReadRange_16" SheetName="Final">
                          <ui:ExcelReadRange.DataTable>
                            <OutArgument x:TypeArguments="sd:DataTable">
                              <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_94">tempDt</CSharpReference>
                            </OutArgument>
                          </ui:ExcelReadRange.DataTable>
                          <ui:ExcelReadRange.Range>
                            <InArgument x:TypeArguments="x:String">
                              <Literal x:TypeArguments="x:String" Value="" />
                            </InArgument>
                          </ui:ExcelReadRange.Range>
                        </ui:ExcelReadRange>
                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="out_isLeft = -1;&#xA;for (int i = curRow - 2; i &lt; in_dt.RowCount(); i++) {&#xA;&#x9;try {&#xA;&#x9;if (in_dt.Rows[i][&quot;Compare sdt&quot;].ToString()!=&quot;0&quot; || in_dt.Rows[i][&quot;Compare ATM&quot;].ToString()!=&quot;0&quot;) {&#xA;&#x9;&#x9;curRow = i+2;&#xA;&#x9;&#x9;int cnt = 0;&#xA;&#x9;&#x9;while (cnt &lt; 3) {&#xA;&#x9;&#x9;&#x9;if (in_dt.Rows[i + cnt][&quot;sdt&quot;].ToString() == in_dt.Rows[i][&quot;REQUEST&quot;].ToString() &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;in_dt.Rows[i + cnt][&quot;AMT&quot;].ToString() == in_dt.Rows[i][&quot;ATM+&quot;].ToString() ) {&#xA;&#x9;&#x9;&#x9;&#x9;out_isLeft = 1;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (in_dt.Rows[i][&quot;sdt&quot;].ToString() == in_dt.Rows[i + cnt][&quot;REQUEST&quot;].ToString() &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;in_dt.Rows[i][&quot;AMT&quot;].ToString() == in_dt.Rows[i + cnt][&quot;ATM+&quot;].ToString()) {&#xA;&#x9;&#x9;&#x9;&#x9;out_isLeft = 0;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;cnt++;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (cnt != 3) break;&#xA;&#x9;&#x9;out_numDel = cnt;&#xA;&#x9;} } catch (Exception e) {&#xA;&#x9;&#x9;out_isLeft = -1;&#xA;&#x9;}&#xA;&#x9;if(i ==  in_dt.Rows.Count - 1) {&#xA;&#x9;&#x9;curRow = i + 100;&#xA;&#x9;}&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="496.8,174.4" sap2010:WorkflowViewState.IdRef="InvokeCode_15" Language="CSharp">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_324">tempDt</CSharpValue>
                            </InArgument>
                            <InOutArgument x:TypeArguments="x:Int32" x:Key="curRow">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_95">curRow</CSharpReference>
                            </InOutArgument>
                            <OutArgument x:TypeArguments="x:Int32" x:Key="out_isLeft">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_96">isLeft</CSharpReference>
                            </OutArgument>
                            <OutArgument x:TypeArguments="x:Int32" x:Key="out_numDel">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_97">numDel</CSharpReference>
                            </OutArgument>
                          </ui:InvokeCode.Arguments>
                        </ui:InvokeCode>
                        <Switch x:TypeArguments="x:Int32" DisplayName="Switch" sap:VirtualizedContainerService.HintSize="496.8,173.6" sap2010:WorkflowViewState.IdRef="Switch`1_2">
                          <Switch.Expression>
                            <InArgument x:TypeArguments="x:Int32">
                              <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_325">isLeft</CSharpValue>
                            </InArgument>
                          </Switch.Expression>
                          <Sequence x:Key="0" sap:VirtualizedContainerService.HintSize="496,748" sap2010:WorkflowViewState.IdRef="Sequence_74">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="sd:DataTable" Name="dt" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:ExcelReadRange AddHeaders="False" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="433.6,69.6" sap2010:WorkflowViewState.IdRef="ExcelReadRange_17" SheetName="Final">
                              <ui:ExcelReadRange.DataTable>
                                <OutArgument x:TypeArguments="sd:DataTable">
                                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_98">dt</CSharpReference>
                                </OutArgument>
                              </ui:ExcelReadRange.DataTable>
                              <ui:ExcelReadRange.Range>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_326">"A" + curRow + ":T" + lastRow</CSharpValue>
                                </InArgument>
                              </ui:ExcelReadRange.Range>
                            </ui:ExcelReadRange>
                            <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="433.6,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_18" SheetName="Final">
                              <ui:ExcelWriteRange.DataTable>
                                <InArgument x:TypeArguments="sd:DataTable">
                                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_328">dt</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.DataTable>
                              <ui:ExcelWriteRange.StartingCell>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_327">"A" + (curRow + numDel + 1).ToString()</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.StartingCell>
                            </ui:ExcelWriteRange>
                            <ueab:ClearRangeX DisplayName="Clear Sheet/Range/Table" HasHeaders="False" sap:VirtualizedContainerService.HintSize="433.6,125.6" sap2010:WorkflowViewState.IdRef="ClearRangeX_6">
                              <ueab:ClearRangeX.TargetRange>
                                <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                  <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_329">Excel.Sheet["Final"].Range["A" + curRow + ":T" + (curRow + numDel).ToString()]</CSharpValue>
                                </InArgument>
                              </ueab:ClearRangeX.TargetRange>
                            </ueab:ClearRangeX>
                            <Assign sap:VirtualizedContainerService.HintSize="433.6,69.6" sap2010:WorkflowViewState.IdRef="Assign_14">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_99">curRow</CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_330">curRow + numDel + 1</CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="433.6,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_14" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_331">curRow</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                          <Sequence x:Key="1" sap:VirtualizedContainerService.HintSize="496,748" sap2010:WorkflowViewState.IdRef="Sequence_75">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="sd:DataTable" Name="dt" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:ExcelReadRange AddHeaders="False" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="433.6,69.6" sap2010:WorkflowViewState.IdRef="ExcelReadRange_18" SheetName="Final">
                              <ui:ExcelReadRange.DataTable>
                                <OutArgument x:TypeArguments="sd:DataTable">
                                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_100">dt</CSharpReference>
                                </OutArgument>
                              </ui:ExcelReadRange.DataTable>
                              <ui:ExcelReadRange.Range>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_332">"W" + curRow + ":AC" + lastRow</CSharpValue>
                                </InArgument>
                              </ui:ExcelReadRange.Range>
                            </ui:ExcelReadRange>
                            <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="433.6,97.6" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_19" SheetName="Final">
                              <ui:ExcelWriteRange.DataTable>
                                <InArgument x:TypeArguments="sd:DataTable">
                                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_334">dt</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.DataTable>
                              <ui:ExcelWriteRange.StartingCell>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_333">"W" + (curRow + numDel + 1).ToString()</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.StartingCell>
                            </ui:ExcelWriteRange>
                            <ueab:ClearRangeX DisplayName="Clear Sheet/Range/Table" HasHeaders="False" sap:VirtualizedContainerService.HintSize="433.6,125.6" sap2010:WorkflowViewState.IdRef="ClearRangeX_7">
                              <ueab:ClearRangeX.TargetRange>
                                <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                  <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_335">Excel.Sheet["Final"].Range["W" + curRow + ":AC" + (curRow + numDel).ToString()]</CSharpValue>
                                </InArgument>
                              </ueab:ClearRangeX.TargetRange>
                            </ueab:ClearRangeX>
                            <Assign sap:VirtualizedContainerService.HintSize="433.6,69.6" sap2010:WorkflowViewState.IdRef="Assign_15">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_101">curRow</CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_336">curRow + numDel + 1</CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="433.6,102.4" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_337">curRow</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                        </Switch>
                        <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="10" ColumnName="A" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="496.8,317.6" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_12" LastRowOffset="0">
                          <ueab:FindFirstLastDataRowX.LastRowIndex>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_102">lastRowSoPhu</CSharpReference>
                            </OutArgument>
                          </ueab:FindFirstLastDataRowX.LastRowIndex>
                          <ueab:FindFirstLastDataRowX.Range>
                            <InArgument x:TypeArguments="ue:IReadRangeRef">
                              <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_338">Excel.Sheet["Final"]</CSharpValue>
                            </InArgument>
                          </ueab:FindFirstLastDataRowX.Range>
                        </ueab:FindFirstLastDataRowX>
                        <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="10" ColumnName="W" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="496.8,317.6" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_13" LastRowOffset="0">
                          <ueab:FindFirstLastDataRowX.LastRowIndex>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_103">lastRowKho</CSharpReference>
                            </OutArgument>
                          </ueab:FindFirstLastDataRowX.LastRowIndex>
                          <ueab:FindFirstLastDataRowX.Range>
                            <InArgument x:TypeArguments="ue:IReadRangeRef">
                              <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_339">Excel.Sheet["Final"]</CSharpValue>
                            </InArgument>
                          </ueab:FindFirstLastDataRowX.Range>
                        </ueab:FindFirstLastDataRowX>
                        <Assign sap:VirtualizedContainerService.HintSize="496.8,69.6" sap2010:WorkflowViewState.IdRef="Assign_16">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_104">lastRow</CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">
                              <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_340">Math.Max(lastRowSoPhu, lastRowKho)</CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:InterruptibleWhile.Body>
                    <ui:InterruptibleWhile.Condition>
                      <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_341">curRow &lt; lastRow</CSharpValue>
                    </ui:InterruptibleWhile.Condition>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InterruptibleWhile>
                  <ueab:SaveExcelFileX DisplayName="Save Excel File" sap:VirtualizedContainerService.HintSize="594.4,95.2" sap2010:WorkflowViewState.IdRef="SaveExcelFileX_1">
                    <ueab:SaveExcelFileX.Workbook>
                      <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                        <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_225">Excel</CSharpValue>
                      </InArgument>
                    </ueab:SaveExcelFileX.Workbook>
                  </ueab:SaveExcelFileX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_214" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS.xlsx"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ueab:ExcelProcessScopeX>
  </Sequence>
</Activity>