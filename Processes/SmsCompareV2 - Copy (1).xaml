<Activity mc:Ignorable="sap sap2010" x:Class="SmsCompareV2" this:SmsCompareV2.in_Folder="D:\\TOPUP_BIDV\\11_2022\\FinalSMS" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_SoPhu" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Kho" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Folder" Type="InArgument(x:String)" />
  </x:Members>
  <this:SmsCompareV2.in_SoPhu>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_SoPhu>
  <this:SmsCompareV2.in_Kho>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_Kho>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1021,7882</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="35">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities.Business.Filter</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="58">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SmsCompareV2" sap:VirtualizedContainerService.HintSize="826,7817" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="sophu" />
      <Variable x:TypeArguments="sd:DataTable" Name="kho" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="764,92" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">DateTime.Now.ToString("hh:mm:ss") + ": Starting compare SMS..."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" ExistingProcessAction="ForceKill" sap:VirtualizedContainerService.HintSize="764,923" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_17" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="434,836" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_14" ResizeWindow="None">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,567" sap2010:WorkflowViewState.IdRef="Sequence_65">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_9" SheetName="SoPhu" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_234">in_SoPhu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_10" SheetName="Kho" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_235">in_Kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="338,80" sap2010:WorkflowViewState.IdRef="ClearDataTable_3">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_61">in_SoPhu</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="338,80" sap2010:WorkflowViewState.IdRef="ClearDataTable_4">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_62">in_Kho</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_233" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
    </ueab:ExcelProcessScopeX>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="764,52" sap2010:WorkflowViewState.IdRef="CommentOut_16">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,163" sap2010:WorkflowViewState.IdRef="Sequence_66">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="338,52" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_8" InstanceCachePeriod="3000" Visible="False">
            <ui:ExcelApplicationScope.Body>
              <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,327" sap2010:WorkflowViewState.IdRef="Sequence_28">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="SoPhu" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_114">in_SoPhu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_2" SheetName="Kho" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_116">in_Kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                </Sequence>
              </ActivityAction>
            </ui:ExcelApplicationScope.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelApplicationScope.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_121" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
              </InArgument>
            </ui:ExcelApplicationScope.WorkbookPath>
          </ui:ExcelApplicationScope>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="764,92" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_182">"Write succeed."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" ExistingProcessAction="ForceKill" sap:VirtualizedContainerService.HintSize="764,1281" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_16" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" AutoSave="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="540,1194" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_13" ResizeWindow="None" TemplatePath="D:\\TOPUP_BIDV\\11_2022\\FinalSMS\\T11_2022_SMS.xlsx" UseTemplate="True">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="506,902" sap2010:WorkflowViewState.IdRef="Sequence_61">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="lastRow" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:SortX DisplayName="Sort Range" HasHeaders="True" sap:VirtualizedContainerService.HintSize="444,213" sap2010:WorkflowViewState.IdRef="SortX_1">
                    <ueab:SortX.Body>
                      <ActivityAction>
                        <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_62">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ueab:SortColumnX ColumnName="DateTime" DisplayName="Sort By Column" sap:VirtualizedContainerService.HintSize="382,62" sap2010:WorkflowViewState.IdRef="SortColumnX_1" SortDirection="Ascending" />
                        </Sequence>
                      </ActivityAction>
                    </ueab:SortX.Body>
                    <ueab:SortX.Range>
                      <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_217">Excel.Sheet["SoPhu"]</CSharpValue>
                      </InArgument>
                    </ueab:SortX.Range>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ueab:SortX>
                  <ueab:SortX DisplayName="Sort Range" HasHeaders="True" sap:VirtualizedContainerService.HintSize="444,213" sap2010:WorkflowViewState.IdRef="SortX_2">
                    <ueab:SortX.Body>
                      <ActivityAction>
                        <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_63">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ueab:SortColumnX ColumnName="DATE" DisplayName="Sort By Column" sap:VirtualizedContainerService.HintSize="382,62" sap2010:WorkflowViewState.IdRef="SortColumnX_2" SortDirection="Ascending" />
                        </Sequence>
                      </ActivityAction>
                    </ueab:SortX.Body>
                    <ueab:SortX.Range>
                      <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_218">Excel.Sheet["Kho"]</CSharpValue>
                      </InArgument>
                    </ueab:SortX.Range>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ueab:SortX>
                  <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="444,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_6" SheetName="SoPhu">
                    <ui:ExcelReadRange.DataTable>
                      <OutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_52">sophu</CSharpReference>
                      </OutArgument>
                    </ui:ExcelReadRange.DataTable>
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="444,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_7" SheetName="Kho">
                    <ui:ExcelReadRange.DataTable>
                      <OutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_54">kho</CSharpReference>
                      </OutArgument>
                    </ui:ExcelReadRange.DataTable>
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ueab:SaveExcelFileX DisplayName="Save Excel File" sap:VirtualizedContainerService.HintSize="444,85" sap2010:WorkflowViewState.IdRef="SaveExcelFileX_3">
                    <ueab:SaveExcelFileX.Workbook>
                      <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                        <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_227">Excel</CSharpValue>
                      </InArgument>
                    </ueab:SaveExcelFileX.Workbook>
                  </ueab:SaveExcelFileX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_216" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ueab:ExcelProcessScopeX>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="764,52" sap2010:WorkflowViewState.IdRef="CommentOut_11">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="462,558" sap2010:WorkflowViewState.IdRef="Sequence_50">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap:VirtualizedContainerService.HintSize="400,447" sap2010:WorkflowViewState.IdRef="Sequence_49">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:JoinDataTables DisplayName="Join Data Tables" sap:VirtualizedContainerService.HintSize="338,60" sap2010:WorkflowViewState.IdRef="JoinDataTables_2" JoinType="Full">
              <ui:JoinDataTables.Arguments>
                <scg:List x:TypeArguments="ui:JoinOperationArgument" Capacity="4">
                  <ui:JoinOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EQ">
                    <ui:JoinOperationArgument.Column1>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_82">"sdt"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column1>
                    <ui:JoinOperationArgument.Column2>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_83">"REQUEST"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column2>
                  </ui:JoinOperationArgument>
                  <ui:JoinOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EQ">
                    <ui:JoinOperationArgument.Column1>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_84">"AMT"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column1>
                    <ui:JoinOperationArgument.Column2>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_85">"ATM+"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column2>
                  </ui:JoinOperationArgument>
                </scg:List>
              </ui:JoinDataTables.Arguments>
              <ui:JoinDataTables.DataTable1>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_104">sophu</CSharpValue>
                </InArgument>
              </ui:JoinDataTables.DataTable1>
              <ui:JoinDataTables.DataTable2>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_105">kho</CSharpValue>
                </InArgument>
              </ui:JoinDataTables.DataTable2>
              <ui:JoinDataTables.OutputDataTable>
                <OutArgument x:TypeArguments="sd:DataTable">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">newDt</CSharpReference>
                </OutArgument>
              </ui:JoinDataTables.OutputDataTable>
            </ui:JoinDataTables>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="DateTime date1;&#xA;DateTime date2;&#xA;TimeSpan time;&#xA;DataTable temp = in_dt.Clone();&#xA;foreach (DataRow row in in_dt.Rows) {&#xA;&#x9;if (!String.IsNullOrEmpty(row[&quot;ATM+&quot;].ToString()) &amp;&amp; !String.IsNullOrEmpty(row[&quot;AMT&quot;].ToString())) {&#xA;&#x9;&#x9;date1 = DateTime.Parse(row[&quot;DateTime&quot;].ToString());&#xA;&#x9;&#x9;date2 = DateTime.Parse(row[&quot;DATE&quot;].ToString());&#xA;&#x9;&#x9;time = date1 - date2;&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = 0;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = 0;&#xA;&#x9;&#x9;if (Math.Abs(time.TotalMilliseconds) &lt; 100000) temp.ImportRow(row);&#xA;&#x9;}&#xA;&#x9;if (String.IsNullOrEmpty(row[&quot;ATM+&quot;].ToString())) {&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;temp.ImportRow(row);&#xA;&#x9;}&#xA;&#x9;if (String.IsNullOrEmpty(row[&quot;AMT&quot;].ToString())) {&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;temp.ImportRow(row);&#xA;&#x9;}&#xA;}&#xA;in_dt.Clear();&#xA;in_dt = temp;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,52" sap2010:WorkflowViewState.IdRef="InvokeCode_9" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <InOutArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_26">newDt</CSharpReference>
                </InOutArgument>
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
            <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="338,52" sap2010:WorkflowViewState.IdRef="CommentOut_1">
              <ui:CommentOut.Body>
                <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,276" sap2010:WorkflowViewState.IdRef="Sequence_22">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeCode ContinueOnError="{x:Null}" Code="tables = new List&lt;DataTable&gt;();&#xA;     int i = 0;&#xA;     int j = 1;&#xA;    DataTable newDt = in_dt.Clone();&#xA;   newDt.TableName = &quot;T&quot; + DateTime.Now.AddMonths(-1).Month + &quot;_&quot; + DateTime.Now.AddMonths(-1).Year +  &quot;_SMS_&quot; + j;&#xA;   newDt.Clear();&#xA;    foreach (DataRow row in in_dt.Rows)&#xA;    {&#xA;         DataRow newRow = newDt.NewRow();&#xA;         newRow.ItemArray = row.ItemArray;&#xA;         newDt.Rows.Add(newRow);&#xA;         i++;&#xA;         if (i == batchSize)&#xA;        {&#xA;           tables.Add(newDt);&#xA;           j++;&#xA;          newDt = in_dt.Clone();&#xA;          newDt.TableName = &quot;T&quot; + DateTime.Now.AddMonths(-1).Month + &quot;_&quot; + DateTime.Now.AddMonths(-1).Year +  &quot;_SMS_&quot; + j;&#xA;          newDt.Clear();&#xA;          i = 0;&#xA;  }&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9;if(i != 0){&#xA;&#x9;&#x9;tables.Add(newDt);&#xA;&#x9;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,165" sap2010:WorkflowViewState.IdRef="InvokeCode_7" Language="CSharp">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_87">newDt</CSharpValue>
                      </InArgument>
                      <OutArgument x:TypeArguments="scg:List(sd:DataTable)" x:Key="tables">
                        <CSharpReference x:TypeArguments="scg:List(sd:DataTable)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_22">tables</CSharpReference>
                      </OutArgument>
                      <InArgument x:TypeArguments="x:Int32" x:Key="batchSize">1000000</InArgument>
                    </ui:InvokeCode.Arguments>
                  </ui:InvokeCode>
                </Sequence>
              </ui:CommentOut.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:CommentOut>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="338,52" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Trace">
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">DateTime.Now.ToString("hh:mm:ss") + ": Starting write excel..."</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:LogMessage>
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="764,52" sap2010:WorkflowViewState.IdRef="CommentOut_15">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,163" sap2010:WorkflowViewState.IdRef="Sequence_55">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="338,52" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_7" InstanceCachePeriod="3000">
            <ui:ExcelApplicationScope.Body>
              <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,760" sap2010:WorkflowViewState.IdRef="Sequence_43">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_6" SheetName="Final" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_175">in_SoPhu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_7" SheetName="Final" StartingCell="W1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_176">in_Kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="338,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_5" SheetName="Final">
                    <ui:ExcelReadRange.DataTable>
                      <OutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_40">finalTable</CSharpReference>
                      </OutArgument>
                    </ui:ExcelReadRange.DataTable>
                    <ui:ExcelReadRange.Range>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </ui:ExcelReadRange.Range>
                  </ui:ExcelReadRange>
                  <ui:InvokeCode ContinueOnError="{x:Null}" Code="int curRow = 0;&#xA;int lastRow = io_dt.Rows.Count - 1;&#xA;while (curRow &lt;= lastRow) {&#xA;&#x9;for (int i = curRow; i &lt;= lastRow; i++) {&#xA;&#x9;&#x9;DataRow row = io_dt.Rows[i];&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;if (i &lt;= lastRow - 3 &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;(Int32.Parse(row[&quot;sdt&quot;].ToString()) != Int32.Parse(row[&quot;REQUEST&quot;].ToString()) ||&#xA;&#x9;&#x9;&#x9;&#x9;Int32.Parse(row[&quot;AMT&quot;].ToString()) != Int32.Parse(row[&quot;ATM+&quot;].ToString())) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( !(Int32.Parse(io_dt.Rows[i + 1][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 1][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 1][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 1][&quot;ATM+&quot;].ToString()) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 2][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 2][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 2][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 2][&quot;ATM+&quot;].ToString()) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 3][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 3][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 3][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 3][&quot;ATM+&quot;].ToString()) ) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;Current row = &quot; + i);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (int j = i + 1; j &lt; io_dt.Rows.Count - 1; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;TELCO&quot;] = io_dt.Rows[j - 1][&quot;TELCO&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;ATM+&quot;] = io_dt.Rows[j - 1][&quot;ATM+&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;TRACE-&quot;] = io_dt.Rows[j - 1][&quot;TRACE-&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;DATE&quot;] = io_dt.Rows[j - 1][&quot;DATE&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;REQUEST&quot;] = io_dt.Rows[j - 1][&quot;REQUEST&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;BENNE&quot;] = io_dt.Rows[j - 1][&quot;BENNE&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;MERCHANT&quot;] = io_dt.Rows[j - 1][&quot;MERCHANT&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;TELCO&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;ATM+&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;TRACE-&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;DATE&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;REQUEST&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;BENNE&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;MERCHANT&quot;] = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;curRow = i + 1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lastRow ++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} catch (System.Exception e) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,165" sap2010:WorkflowViewState.IdRef="InvokeCode_11" Language="CSharp">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="io_dt">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_180">finalTable</CSharpValue>
                      </InArgument>
                    </ui:InvokeCode.Arguments>
                  </ui:InvokeCode>
                  <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_8" SheetName="Final" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_181">finalTable</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                </Sequence>
              </ActivityAction>
            </ui:ExcelApplicationScope.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelApplicationScope.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_154" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
              </InArgument>
            </ui:ExcelApplicationScope.WorkbookPath>
          </ui:ExcelApplicationScope>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" ExistingProcessAction="ForceKill" sap:VirtualizedContainerService.HintSize="764,4882" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_18" ProcessMode="AlwaysCreateNew">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" AutoSave="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="730,4795" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_12" ResizeWindow="None" TemplatePath="D:\\Files\\FinalSMS\\T11_2022_SMS.xlsx" UseTemplate="True">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="696,4503" sap2010:WorkflowViewState.IdRef="Sequence_57">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="lastRowSoPhu" />
                    <Variable x:TypeArguments="x:Int32" Name="lastRowKho" />
                    <Variable x:TypeArguments="x:Int32" Name="curRow" />
                    <Variable x:TypeArguments="x:Int32" Name="lastRow" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="634,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_11" SheetName="Final" StartingCell="A1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_236">sophu</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <Delay Duration="00:00:01" sap:VirtualizedContainerService.HintSize="634,90" sap2010:WorkflowViewState.IdRef="Delay_4" />
                  <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="634,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_12" SheetName="Final" StartingCell="W1">
                    <ui:ExcelWriteRange.DataTable>
                      <InArgument x:TypeArguments="sd:DataTable">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_238">kho</CSharpValue>
                      </InArgument>
                    </ui:ExcelWriteRange.DataTable>
                  </ui:ExcelWriteRange>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="634,80" sap2010:WorkflowViewState.IdRef="ClearDataTable_1">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_59">sophu</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <ui:ClearDataTable DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="634,80" sap2010:WorkflowViewState.IdRef="ClearDataTable_2">
                    <ui:ClearDataTable.DataTable>
                      <InOutArgument x:TypeArguments="sd:DataTable">
                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_60">kho</CSharpReference>
                      </InOutArgument>
                    </ui:ClearDataTable.DataTable>
                  </ui:ClearDataTable>
                  <Delay Duration="00:00:01" sap:VirtualizedContainerService.HintSize="634,90" sap2010:WorkflowViewState.IdRef="Delay_5" />
                  <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="1" ColumnName="A" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="634,304" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_6" LastRowOffset="0">
                    <ueab:FindFirstLastDataRowX.LastRowIndex>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_51">lastRowSoPhu</CSharpReference>
                      </OutArgument>
                    </ueab:FindFirstLastDataRowX.LastRowIndex>
                    <ueab:FindFirstLastDataRowX.Range>
                      <InArgument x:TypeArguments="ue:IReadRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_232">Excel.Sheet["Final"]</CSharpValue>
                      </InArgument>
                    </ueab:FindFirstLastDataRowX.Range>
                  </ueab:FindFirstLastDataRowX>
                  <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="1" ColumnName="W" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="634,304" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_9" LastRowOffset="0">
                    <ueab:FindFirstLastDataRowX.LastRowIndex>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_72">lastRowKho</CSharpReference>
                      </OutArgument>
                    </ueab:FindFirstLastDataRowX.LastRowIndex>
                    <ueab:FindFirstLastDataRowX.Range>
                      <InArgument x:TypeArguments="ue:IReadRangeRef">
                        <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_268">Excel.Sheet["Final"]</CSharpValue>
                      </InArgument>
                    </ueab:FindFirstLastDataRowX.Range>
                  </ueab:FindFirstLastDataRowX>
                  <Assign sap:VirtualizedContainerService.HintSize="634,61" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_73">lastRow</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">
                        <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_269">Math.Max(lastRowSoPhu, lastRowKho)</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="634,61" sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_76">curRow</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">2</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:InterruptibleWhile CurrentIndex="{x:Null}" DisplayName="While" sap:VirtualizedContainerService.HintSize="634,2621" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_3">
                    <ui:InterruptibleWhile.Body>
                      <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="598,2455" sap2010:WorkflowViewState.IdRef="Sequence_71">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="sd:DataTable" Name="tempDt" />
                          <Variable x:TypeArguments="x:Int32" Name="isLeft" />
                          <Variable x:TypeArguments="x:Int32" Name="nextRow" />
                        </Sequence.Variables>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="536,138" sap2010:WorkflowViewState.IdRef="FillRangeX_7">
                          <ueab:FillRangeX.DestinationRange>
                            <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                              <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_285">Excel.Sheet["Final"].Range["U" + curRow + ":U" + lastRow]</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.DestinationRange>
                          <ueab:FillRangeX.Value>
                            <InArgument x:TypeArguments="x:Object">
                              <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_286">"=T"+ curRow + "-AA" + curRow</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.Value>
                        </ueab:FillRangeX>
                        <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="536,138" sap2010:WorkflowViewState.IdRef="FillRangeX_8">
                          <ueab:FillRangeX.DestinationRange>
                            <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                              <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_287">Excel.Sheet["Final"].Range["V" + curRow + ":V" + lastRow]</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.DestinationRange>
                          <ueab:FillRangeX.Value>
                            <InArgument x:TypeArguments="x:Object">
                              <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_290">"=F"+ curRow + "-X" + curRow</CSharpValue>
                            </InArgument>
                          </ueab:FillRangeX.Value>
                        </ueab:FillRangeX>
                        <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="536,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_13" SheetName="Final">
                          <ui:ExcelReadRange.DataTable>
                            <OutArgument x:TypeArguments="sd:DataTable">
                              <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_77">tempDt</CSharpReference>
                            </OutArgument>
                          </ui:ExcelReadRange.DataTable>
                          <ui:ExcelReadRange.Range>
                            <InArgument x:TypeArguments="x:String">
                              <Literal x:TypeArguments="x:String" Value="" />
                            </InArgument>
                          </ui:ExcelReadRange.Range>
                        </ui:ExcelReadRange>
                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="out_isLeft = -1;&#xD;&#xA;for (int i = curRow - 2; i &lt; in_dt.RowCount() - 1; i++) {&#xD;&#xA;&#x9;if (in_dt.Rows[i][&quot;Compare sdt&quot;].ToString()!=&quot;0&quot; || in_dt.Rows[i][&quot;Compare ATM&quot;].ToString()!=&quot;0&quot;) {&#xD;&#xA;&#x9;&#x9;curRow = i;&#xD;&#xA;&#x9;&#x9;if (in_dt.Rows[i + 1][&quot;sdt&quot;].ToString() == in_dt.Rows[i][&quot;REQUEST&quot;].ToString() &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;in_dt.Rows[i + 1][&quot;AMT&quot;].ToString() == in_dt.Rows[i][&quot;ATM+&quot;].ToString() ) {&#xD;&#xA;&#x9;&#x9;&#x9;out_isLeft = 1;&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (in_dt.Rows[i][&quot;sdt&quot;].ToString() == in_dt.Rows[i + 1][&quot;REQUEST&quot;].ToString() &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;in_dt.Rows[i][&quot;AMT&quot;].ToString() == in_dt.Rows[i + 1][&quot;ATM+&quot;].ToString()) {&#xD;&#xA;&#x9;&#x9;&#x9;out_isLeft = 0;&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="536,165" sap2010:WorkflowViewState.IdRef="InvokeCode_14" Language="CSharp">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_271">tempDt</CSharpValue>
                            </InArgument>
                            <InOutArgument x:TypeArguments="x:Int32" x:Key="curRow">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_89">curRow</CSharpReference>
                            </InOutArgument>
                            <OutArgument x:TypeArguments="x:Int32" x:Key="out_isLeft">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_79">isLeft</CSharpReference>
                            </OutArgument>
                          </ui:InvokeCode.Arguments>
                        </ui:InvokeCode>
                        <Switch x:TypeArguments="x:Int32" DisplayName="Switch" sap:VirtualizedContainerService.HintSize="536,894" sap2010:WorkflowViewState.IdRef="Switch`1_1">
                          <Switch.Expression>
                            <InArgument x:TypeArguments="x:Int32">
                              <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_273">isLeft</CSharpValue>
                            </InArgument>
                          </Switch.Expression>
                          <Sequence x:Key="1" sap:VirtualizedContainerService.HintSize="496,688" sap2010:WorkflowViewState.IdRef="Sequence_72">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="sd:DataTable" Name="dt" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:ExcelReadRange AddHeaders="False" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="434,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_14" SheetName="Final">
                              <ui:ExcelReadRange.DataTable>
                                <OutArgument x:TypeArguments="sd:DataTable">
                                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_81">dt</CSharpReference>
                                </OutArgument>
                              </ui:ExcelReadRange.DataTable>
                              <ui:ExcelReadRange.Range>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_274">"A" + curRow + ":T" + lastRow</CSharpValue>
                                </InArgument>
                              </ui:ExcelReadRange.Range>
                            </ui:ExcelReadRange>
                            <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="434,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_16" SheetName="Final">
                              <ui:ExcelWriteRange.DataTable>
                                <InArgument x:TypeArguments="sd:DataTable">
                                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_276">dt</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.DataTable>
                              <ui:ExcelWriteRange.StartingCell>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_304">"A" + (curRow + 1).ToString()</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.StartingCell>
                            </ui:ExcelWriteRange>
                            <ueab:ClearRangeX DisplayName="Clear Sheet/Range/Table" HasHeaders="False" sap:VirtualizedContainerService.HintSize="434,116" sap2010:WorkflowViewState.IdRef="ClearRangeX_4">
                              <ueab:ClearRangeX.TargetRange>
                                <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                  <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_305">Excel.Sheet["Final"].Range["A" + curRow + ":T" + curRow]</CSharpValue>
                                </InArgument>
                              </ueab:ClearRangeX.TargetRange>
                            </ueab:ClearRangeX>
                            <Assign sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="Assign_9">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_82">curRow</CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_306">curRow + 1</CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_307">curRow</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                          <Sequence x:Key="0" sap:VirtualizedContainerService.HintSize="496,688" sap2010:WorkflowViewState.IdRef="Sequence_73">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="sd:DataTable" Name="dt" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:ExcelReadRange AddHeaders="False" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="434,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_15" SheetName="Final">
                              <ui:ExcelReadRange.DataTable>
                                <OutArgument x:TypeArguments="sd:DataTable">
                                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_83">dt</CSharpReference>
                                </OutArgument>
                              </ui:ExcelReadRange.DataTable>
                              <ui:ExcelReadRange.Range>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_279">"W" + curRow + ":AC" + lastRow</CSharpValue>
                                </InArgument>
                              </ui:ExcelReadRange.Range>
                            </ui:ExcelReadRange>
                            <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="434,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_17" SheetName="Final">
                              <ui:ExcelWriteRange.DataTable>
                                <InArgument x:TypeArguments="sd:DataTable">
                                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_281">dt</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.DataTable>
                              <ui:ExcelWriteRange.StartingCell>
                                <InArgument x:TypeArguments="x:String">
                                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_301">"W" + (curRow + 1).ToString()</CSharpValue>
                                </InArgument>
                              </ui:ExcelWriteRange.StartingCell>
                            </ui:ExcelWriteRange>
                            <ueab:ClearRangeX DisplayName="Clear Sheet/Range/Table" HasHeaders="False" sap:VirtualizedContainerService.HintSize="434,116" sap2010:WorkflowViewState.IdRef="ClearRangeX_5">
                              <ueab:ClearRangeX.TargetRange>
                                <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                  <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_302">Excel.Sheet["Final"].Range["W" + curRow + ":AC" + curRow]</CSharpValue>
                                </InArgument>
                              </ueab:ClearRangeX.TargetRange>
                            </ueab:ClearRangeX>
                            <Assign sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="Assign_11">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_85">curRow</CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_303">curRow + 1</CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Info">
                              <ui:LogMessage.Message>
                                <InArgument x:TypeArguments="x:Object">
                                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_300">curRow</CSharpValue>
                                </InArgument>
                              </ui:LogMessage.Message>
                            </ui:LogMessage>
                          </Sequence>
                        </Switch>
                        <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="1" ColumnName="A" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="536,304" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_10" LastRowOffset="0">
                          <ueab:FindFirstLastDataRowX.LastRowIndex>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_86">lastRowSoPhu</CSharpReference>
                            </OutArgument>
                          </ueab:FindFirstLastDataRowX.LastRowIndex>
                          <ueab:FindFirstLastDataRowX.Range>
                            <InArgument x:TypeArguments="ue:IReadRangeRef">
                              <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_295">Excel.Sheet["Final"]</CSharpValue>
                            </InArgument>
                          </ueab:FindFirstLastDataRowX.Range>
                        </ueab:FindFirstLastDataRowX>
                        <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="1" ColumnName="W" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="536,304" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_11" LastRowOffset="0">
                          <ueab:FindFirstLastDataRowX.LastRowIndex>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_87">lastRowKho</CSharpReference>
                            </OutArgument>
                          </ueab:FindFirstLastDataRowX.LastRowIndex>
                          <ueab:FindFirstLastDataRowX.Range>
                            <InArgument x:TypeArguments="ue:IReadRangeRef">
                              <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_296">Excel.Sheet["Final"]</CSharpValue>
                            </InArgument>
                          </ueab:FindFirstLastDataRowX.Range>
                        </ueab:FindFirstLastDataRowX>
                        <Assign sap:VirtualizedContainerService.HintSize="536,61" sap2010:WorkflowViewState.IdRef="Assign_12">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">
                              <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_88">lastRow</CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">
                              <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_297">Math.Max(lastRowSoPhu, lastRowKho)</CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ui:InterruptibleWhile.Body>
                    <ui:InterruptibleWhile.Condition>
                      <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_270">curRow &lt;= lastRow</CSharpValue>
                    </ui:InterruptibleWhile.Condition>
                  </ui:InterruptibleWhile>
                  <ueab:SaveExcelFileX DisplayName="Save Excel File" sap:VirtualizedContainerService.HintSize="634,85" sap2010:WorkflowViewState.IdRef="SaveExcelFileX_1">
                    <ueab:SaveExcelFileX.Workbook>
                      <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                        <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_225">Excel</CSharpValue>
                      </InArgument>
                    </ueab:SaveExcelFileX.Workbook>
                  </ueab:SaveExcelFileX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ueab:ExcelApplicationCard.WorkbookPath>
              <InArgument x:TypeArguments="x:String">
                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_214" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS.xlsx"</CSharpValue>
              </InArgument>
            </ueab:ExcelApplicationCard.WorkbookPath>
          </ueab:ExcelApplicationCard>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
    </ueab:ExcelProcessScopeX>
  </Sequence>
</Activity>