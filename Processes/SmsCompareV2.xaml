<Activity mc:Ignorable="sap sap2010" x:Class="SmsCompareV2" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_SoPhu" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Kho" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Folder" Type="InArgument(x:String)" />
  </x:Members>
  <this:SmsCompareV2.in_SoPhu>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_SoPhu>
  <this:SmsCompareV2.in_Kho>
    <InArgument x:TypeArguments="sd:DataTable">
      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">new DataTable()</CSharpValue>
    </InArgument>
  </this:SmsCompareV2.in_Kho>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1020,2127</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="35">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities.Business.Filter</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="58">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SmsCompareV2" sap:VirtualizedContainerService.HintSize="496,2062" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="newDt" />
      <Variable x:TypeArguments="scg:List(sd:DataTable)" Name="tables">
        <Variable.Default>
          <CSharpValue x:TypeArguments="scg:List(sd:DataTable)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_53">new List&lt;DataTable&gt;()</CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="sd:DataTable" Name="sophu" />
      <Variable x:TypeArguments="sd:DataTable" Name="kho" />
      <Variable x:TypeArguments="x:String" Name="result" />
      <Variable x:TypeArguments="sd:DataTable" Name="finalTable" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,101" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace">
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">DateTime.Now.ToString("hh:mm:ss") + ": Starting compare SMS..."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="CommentOut_11">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="462,818" sap2010:WorkflowViewState.IdRef="Sequence_50">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap:VirtualizedContainerService.HintSize="400,696" sap2010:WorkflowViewState.IdRef="Sequence_49">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" InstanceCachePeriod="3000">
              <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,356" sap2010:WorkflowViewState.IdRef="Sequence_28">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="SoPhu" StartingCell="A1">
                      <ui:ExcelWriteRange.DataTable>
                        <InArgument x:TypeArguments="sd:DataTable">
                          <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_114">in_SoPhu</CSharpValue>
                        </InArgument>
                      </ui:ExcelWriteRange.DataTable>
                    </ui:ExcelWriteRange>
                    <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_2" SheetName="Kho" StartingCell="A1">
                      <ui:ExcelWriteRange.DataTable>
                        <InArgument x:TypeArguments="sd:DataTable">
                          <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_116">in_Kho</CSharpValue>
                        </InArgument>
                      </ui:ExcelWriteRange.DataTable>
                    </ui:ExcelWriteRange>
                  </Sequence>
                </ActivityAction>
              </ui:ExcelApplicationScope.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:ExcelApplicationScope.WorkbookPath>
                <InArgument x:TypeArguments="x:String">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_121" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
                </InArgument>
              </ui:ExcelApplicationScope.WorkbookPath>
            </ui:ExcelApplicationScope>
            <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" InstanceCachePeriod="3000">
              <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,300" sap2010:WorkflowViewState.IdRef="Sequence_26">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="338,69" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="SoPhu">
                      <ui:ExcelReadRange.DataTable>
                        <OutArgument x:TypeArguments="sd:DataTable">
                          <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_23">sophu</CSharpReference>
                        </OutArgument>
                      </ui:ExcelReadRange.DataTable>
                      <ui:ExcelReadRange.Range>
                        <InArgument x:TypeArguments="x:String">
                          <Literal x:TypeArguments="x:String" Value="" />
                        </InArgument>
                      </ui:ExcelReadRange.Range>
                    </ui:ExcelReadRange>
                    <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="338,69" sap2010:WorkflowViewState.IdRef="ExcelReadRange_2" SheetName="Kho">
                      <ui:ExcelReadRange.DataTable>
                        <OutArgument x:TypeArguments="sd:DataTable">
                          <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_25">kho</CSharpReference>
                        </OutArgument>
                      </ui:ExcelReadRange.DataTable>
                      <ui:ExcelReadRange.Range>
                        <InArgument x:TypeArguments="x:String">
                          <Literal x:TypeArguments="x:String" Value="" />
                        </InArgument>
                      </ui:ExcelReadRange.Range>
                    </ui:ExcelReadRange>
                  </Sequence>
                </ActivityAction>
              </ui:ExcelApplicationScope.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:ExcelApplicationScope.WorkbookPath>
                <InArgument x:TypeArguments="x:String">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_122" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
                </InArgument>
              </ui:ExcelApplicationScope.WorkbookPath>
            </ui:ExcelApplicationScope>
            <ui:JoinDataTables DisplayName="Join Data Tables" sap:VirtualizedContainerService.HintSize="338,69" sap2010:WorkflowViewState.IdRef="JoinDataTables_2" JoinType="Full">
              <ui:JoinDataTables.Arguments>
                <scg:List x:TypeArguments="ui:JoinOperationArgument" Capacity="4">
                  <ui:JoinOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EQ">
                    <ui:JoinOperationArgument.Column1>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_82">"sdt"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column1>
                    <ui:JoinOperationArgument.Column2>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_83">"REQUEST"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column2>
                  </ui:JoinOperationArgument>
                  <ui:JoinOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EQ">
                    <ui:JoinOperationArgument.Column1>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_84">"AMT"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column1>
                    <ui:JoinOperationArgument.Column2>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_85">"ATM+"</CSharpValue>
                      </InArgument>
                    </ui:JoinOperationArgument.Column2>
                  </ui:JoinOperationArgument>
                </scg:List>
              </ui:JoinDataTables.Arguments>
              <ui:JoinDataTables.DataTable1>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_104">sophu</CSharpValue>
                </InArgument>
              </ui:JoinDataTables.DataTable1>
              <ui:JoinDataTables.DataTable2>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_105">kho</CSharpValue>
                </InArgument>
              </ui:JoinDataTables.DataTable2>
              <ui:JoinDataTables.OutputDataTable>
                <OutArgument x:TypeArguments="sd:DataTable">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">newDt</CSharpReference>
                </OutArgument>
              </ui:JoinDataTables.OutputDataTable>
            </ui:JoinDataTables>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="DateTime date1;&#xA;DateTime date2;&#xA;TimeSpan time;&#xA;DataTable temp = in_dt.Clone();&#xA;foreach (DataRow row in in_dt.Rows) {&#xA;&#x9;if (!String.IsNullOrEmpty(row[&quot;ATM+&quot;].ToString()) &amp;&amp; !String.IsNullOrEmpty(row[&quot;AMT&quot;].ToString())) {&#xA;&#x9;&#x9;date1 = DateTime.Parse(row[&quot;DateTime&quot;].ToString());&#xA;&#x9;&#x9;date2 = DateTime.Parse(row[&quot;DATE&quot;].ToString());&#xA;&#x9;&#x9;time = date1 - date2;&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = 0;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = 0;&#xA;&#x9;&#x9;if (Math.Abs(time.TotalMilliseconds) &lt; 100000) temp.ImportRow(row);&#xA;&#x9;}&#xA;&#x9;if (String.IsNullOrEmpty(row[&quot;ATM+&quot;].ToString())) {&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;temp.ImportRow(row);&#xA;&#x9;}&#xA;&#x9;if (String.IsNullOrEmpty(row[&quot;AMT&quot;].ToString())) {&#xA;&#x9;&#x9;row[&quot;Compare sdt&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;row[&quot;Compare ATM&quot;] = &quot;#N/A&quot;;&#xA;&#x9;&#x9;temp.ImportRow(row);&#xA;&#x9;}&#xA;}&#xA;in_dt.Clear();&#xA;in_dt = temp;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="InvokeCode_9" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <InOutArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_26">newDt</CSharpReference>
                </InOutArgument>
              </ui:InvokeCode.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeCode>
            <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="CommentOut_1">
              <ui:CommentOut.Body>
                <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,296" sap2010:WorkflowViewState.IdRef="Sequence_22">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeCode ContinueOnError="{x:Null}" Code="tables = new List&lt;DataTable&gt;();&#xA;     int i = 0;&#xA;     int j = 1;&#xA;    DataTable newDt = in_dt.Clone();&#xA;   newDt.TableName = &quot;T&quot; + DateTime.Now.AddMonths(-1).Month + &quot;_&quot; + DateTime.Now.AddMonths(-1).Year +  &quot;_SMS_&quot; + j;&#xA;   newDt.Clear();&#xA;    foreach (DataRow row in in_dt.Rows)&#xA;    {&#xA;         DataRow newRow = newDt.NewRow();&#xA;         newRow.ItemArray = row.ItemArray;&#xA;         newDt.Rows.Add(newRow);&#xA;         i++;&#xA;         if (i == batchSize)&#xA;        {&#xA;           tables.Add(newDt);&#xA;           j++;&#xA;          newDt = in_dt.Clone();&#xA;          newDt.TableName = &quot;T&quot; + DateTime.Now.AddMonths(-1).Month + &quot;_&quot; + DateTime.Now.AddMonths(-1).Year +  &quot;_SMS_&quot; + j;&#xA;          newDt.Clear();&#xA;          i = 0;&#xA;  }&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9;if(i != 0){&#xA;&#x9;&#x9;tables.Add(newDt);&#xA;&#x9;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,174" sap2010:WorkflowViewState.IdRef="InvokeCode_7" Language="CSharp">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_87">newDt</CSharpValue>
                      </InArgument>
                      <OutArgument x:TypeArguments="scg:List(sd:DataTable)" x:Key="tables">
                        <CSharpReference x:TypeArguments="scg:List(sd:DataTable)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_22">tables</CSharpReference>
                      </OutArgument>
                      <InArgument x:TypeArguments="x:Int32" x:Key="batchSize">1000000</InArgument>
                    </ui:InvokeCode.Arguments>
                  </ui:InvokeCode>
                </Sequence>
              </ui:CommentOut.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:CommentOut>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Trace">
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">DateTime.Now.ToString("hh:mm:ss") + ": Starting write excel..."</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:LogMessage>
          </Sequence>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:SortDataTable ColumnIndex="{x:Null}" DataColumn="{x:Null}" OutputDataTable="{x:Null}" ColumnName="DateTime" DisplayName="Sort Data Table" sap:VirtualizedContainerService.HintSize="434,89" sap2010:WorkflowViewState.IdRef="SortDataTable_1" Order="Ascending" SortOrder="Ascending">
      <ui:SortDataTable.DataTable>
        <InArgument x:TypeArguments="sd:DataTable">
          <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_177">in_SoPhu</CSharpValue>
        </InArgument>
      </ui:SortDataTable.DataTable>
    </ui:SortDataTable>
    <ui:SortDataTable ColumnIndex="{x:Null}" DataColumn="{x:Null}" OutputDataTable="{x:Null}" ColumnName="DATE" DisplayName="Sort Data Table" sap:VirtualizedContainerService.HintSize="434,89" sap2010:WorkflowViewState.IdRef="SortDataTable_2" Order="Ascending" SortOrder="Ascending">
      <ui:SortDataTable.DataTable>
        <InArgument x:TypeArguments="sd:DataTable">
          <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_179">in_Kho</CSharpValue>
        </InArgument>
      </ui:SortDataTable.DataTable>
    </ui:SortDataTable>
    <ui:ExcelApplicationScope Password="{x:Null}" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="434,935" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_6" InstanceCachePeriod="3000">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="400,816" sap2010:WorkflowViewState.IdRef="Sequence_43">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_6" SheetName="Final" StartingCell="A1">
              <ui:ExcelWriteRange.DataTable>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_175">in_SoPhu</CSharpValue>
                </InArgument>
              </ui:ExcelWriteRange.DataTable>
            </ui:ExcelWriteRange>
            <ui:ExcelWriteRange AddHeaders="True" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_7" SheetName="Final" StartingCell="W1">
              <ui:ExcelWriteRange.DataTable>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_176">in_Kho</CSharpValue>
                </InArgument>
              </ui:ExcelWriteRange.DataTable>
            </ui:ExcelWriteRange>
            <ui:ExcelReadRange AddHeaders="True" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="338,69" sap2010:WorkflowViewState.IdRef="ExcelReadRange_5" SheetName="Final">
              <ui:ExcelReadRange.DataTable>
                <OutArgument x:TypeArguments="sd:DataTable">
                  <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_40">finalTable</CSharpReference>
                </OutArgument>
              </ui:ExcelReadRange.DataTable>
              <ui:ExcelReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ExcelReadRange.Range>
            </ui:ExcelReadRange>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="int curRow = 0;&#xD;&#xA;int lastRow = io_dt.Rows.Count - 1;&#xD;&#xA;while (curRow &lt;= lastRow) {&#xD;&#xA;&#x9;for (int i = curRow; i &lt;= lastRow; i++) {&#xD;&#xA;&#x9;&#x9;DataRow row = io_dt.Rows[i];&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;if (i &lt;= lastRow - 3 &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(Int32.Parse(row[&quot;sdt&quot;].ToString()) != Int32.Parse(row[&quot;REQUEST&quot;].ToString()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Int32.Parse(row[&quot;AMT&quot;].ToString()) != Int32.Parse(row[&quot;ATM+&quot;].ToString())) ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( !(Int32.Parse(io_dt.Rows[i + 1][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 1][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 1][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 1][&quot;ATM+&quot;].ToString()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 2][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 2][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 2][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 2][&quot;ATM+&quot;].ToString()) ||&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 3][&quot;sdt&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 3][&quot;REQUEST&quot;].ToString()) &amp;&amp;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Int32.Parse(io_dt.Rows[i + 3][&quot;AMT&quot;].ToString()) == Int32.Parse(io_dt.Rows[i + 3][&quot;ATM+&quot;].ToString()) ) ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;Current row = &quot; + i);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (int j = i + 1; j &lt; io_dt.Rows.Count - 1; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;TELCO&quot;] = io_dt.Rows[j - 1][&quot;TELCO&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;ATM+&quot;] = io_dt.Rows[j - 1][&quot;ATM+&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;TRACE-&quot;] = io_dt.Rows[j - 1][&quot;TRACE-&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;DATE&quot;] = io_dt.Rows[j - 1][&quot;DATE&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;REQUEST&quot;] = io_dt.Rows[j - 1][&quot;REQUEST&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;BENNE&quot;] = io_dt.Rows[j - 1][&quot;BENNE&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[j][&quot;MERCHANT&quot;] = io_dt.Rows[j - 1][&quot;MERCHANT&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;TELCO&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;ATM+&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;TRACE-&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;DATE&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;REQUEST&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;BENNE&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;io_dt.Rows[i][&quot;MERCHANT&quot;] = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;curRow = i + 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lastRow ++;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} catch (System.Exception e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,174" sap2010:WorkflowViewState.IdRef="InvokeCode_11" Language="CSharp">
              <ui:InvokeCode.Arguments>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="io_dt">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_180">finalTable</CSharpValue>
                </InArgument>
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
            <ui:ExcelWriteRange AddHeaders="False" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_8" SheetName="Final" StartingCell="A1">
              <ui:ExcelWriteRange.DataTable>
                <InArgument x:TypeArguments="sd:DataTable">
                  <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_181">finalTable</CSharpValue>
                </InArgument>
              </ui:ExcelWriteRange.DataTable>
            </ui:ExcelWriteRange>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:ExcelApplicationScope.WorkbookPath>
        <InArgument x:TypeArguments="x:String">
          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_154" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
        </InArgument>
      </ui:ExcelApplicationScope.WorkbookPath>
    </ui:ExcelApplicationScope>
    <ui:KillProcess AppliesTo="{x:Null}" ContinueOnError="{x:Null}" Process="{x:Null}" DisplayName="Kill Process" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="KillProcess_1" ProcessName="excel.exe">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:KillProcess>
    <ui:InputDialog Options="{x:Null}" DisplayName="Input Dialog" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="InputDialog_1" IsPassword="False" Label="Xử lý đầu ra SMS: " OptionsString="Xử lý;Không xử lý" Title="Option">
      <ui:InputDialog.Result>
        <OutArgument x:TypeArguments="x:String">
          <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_39">result</CSharpReference>
        </OutArgument>
      </ui:InputDialog.Result>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InputDialog>
    <If sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_174">result == "Xử lý"</CSharpValue>
        </InArgument>
      </If.Condition>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="796,3319" sap2010:WorkflowViewState.IdRef="Sequence_47">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="734,3197" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_11">
            <ueab:ExcelProcessScopeX.Body>
              <ActivityAction x:TypeArguments="ui:IExcelProcess">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="700,3101" sap2010:WorkflowViewState.IdRef="Sequence_39">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="638,2979" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_10" ResizeWindow="None" TemplatePath="D:\\Files\\FinalSMS\\T11_2022_SMS.xlsx" UseTemplate="True">
                    <ueab:ExcelApplicationCard.Body>
                      <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="604,2678" sap2010:WorkflowViewState.IdRef="Sequence_38">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="x:Int32" Name="lastRow" />
                            <Variable x:TypeArguments="x:Int32" Name="curRow" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign sap:VirtualizedContainerService.HintSize="542,70" sap2010:WorkflowViewState.IdRef="Assign_1">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">
                                <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_28">curRow</CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">2</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="1" ColumnName="A" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="542,313" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_1" LastRowOffset="0">
                            <ueab:FindFirstLastDataRowX.LastRowIndex>
                              <OutArgument x:TypeArguments="x:Int32">
                                <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_27">lastRow</CSharpReference>
                              </OutArgument>
                            </ueab:FindFirstLastDataRowX.LastRowIndex>
                            <ueab:FindFirstLastDataRowX.Range>
                              <InArgument x:TypeArguments="ue:IReadRangeRef">
                                <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_136">Excel.Sheet["Final"]</CSharpValue>
                              </InArgument>
                            </ueab:FindFirstLastDataRowX.Range>
                          </ueab:FindFirstLastDataRowX>
                          <ui:InterruptibleWhile CurrentIndex="{x:Null}" DisplayName="While" sap:VirtualizedContainerService.HintSize="542,2093" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_1">
                            <ui:InterruptibleWhile.Body>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="506,1918" sap2010:WorkflowViewState.IdRef="Sequence_40">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="x:Int32" Name="i" />
                                  <Variable x:TypeArguments="sd:DataTable" Name="tempDt" />
                                  <Variable x:TypeArguments="x:Int32" Name="lastRowKho" />
                                  <Variable x:TypeArguments="sd:DataTable" Name="dt" />
                                </Sequence.Variables>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="444,101" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info">
                                  <ui:LogMessage.Message>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_170">curRow</CSharpValue>
                                    </InArgument>
                                  </ui:LogMessage.Message>
                                </ui:LogMessage>
                                <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="444,147" sap2010:WorkflowViewState.IdRef="FillRangeX_1">
                                  <ueab:FillRangeX.DestinationRange>
                                    <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_164">Excel.Sheet["Final"].Range["U" + curRow + ":U" + lastRow]</CSharpValue>
                                    </InArgument>
                                  </ueab:FillRangeX.DestinationRange>
                                  <ueab:FillRangeX.Value>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_146">"=T"+ curRow + "-AA" + curRow</CSharpValue>
                                    </InArgument>
                                  </ueab:FillRangeX.Value>
                                </ueab:FillRangeX>
                                <ueab:FillRangeX DisplayName="Fill Range" sap:VirtualizedContainerService.HintSize="444,147" sap2010:WorkflowViewState.IdRef="FillRangeX_2">
                                  <ueab:FillRangeX.DestinationRange>
                                    <InArgument x:TypeArguments="ue:IWellDefinedReadWriteRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IWellDefinedReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_165">Excel.Sheet["Final"].Range["V" + curRow + ":V" + lastRow]</CSharpValue>
                                    </InArgument>
                                  </ueab:FillRangeX.DestinationRange>
                                  <ueab:FillRangeX.Value>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_147">"=F" + curRow + "-X" + curRow</CSharpValue>
                                    </InArgument>
                                  </ueab:FillRangeX.Value>
                                </ueab:FillRangeX>
                                <ueab:ReadRangeX DisplayName="Read Range" HasHeaders="False" sap:VirtualizedContainerService.HintSize="444,178" sap2010:WorkflowViewState.IdRef="ReadRangeX_1" VisibleOnly="False">
                                  <ueab:ReadRangeX.Range>
                                    <InArgument x:TypeArguments="ue:IReadRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_155">Excel.Sheet["Final"].Range["U"+ curRow +":V" + lastRow]</CSharpValue>
                                    </InArgument>
                                  </ueab:ReadRangeX.Range>
                                  <ueab:ReadRangeX.SaveTo>
                                    <OutArgument x:TypeArguments="sd:DataTable">
                                      <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_33">tempDt</CSharpReference>
                                    </OutArgument>
                                  </ueab:ReadRangeX.SaveTo>
                                </ueab:ReadRangeX>
                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="for (int i = 0; i &lt; in_dt.Rows.Count; i++) {&#xA;&#x9;if(in_dt.Rows[i][0].ToString() != &quot;0&quot; || in_dt.Rows[i][1].ToString() != &quot;0&quot;) {&#xA;&#x9;&#x9;if (!((in_dt.Rows[i + 1][0].ToString() == &quot;0&quot; &amp;&amp; in_dt.Rows[i + 1][1].ToString() == &quot;0&quot;) ||&#xA;&#x9;&#x9;&#x9;(in_dt.Rows[i + 2][0].ToString() == &quot;0&quot; &amp;&amp; in_dt.Rows[i + 2][1].ToString() == &quot;0&quot;) ||&#xA;&#x9;&#x9;&#x9;(in_dt.Rows[i + 3][0].ToString() == &quot;0&quot; &amp;&amp; in_dt.Rows[i + 3][1].ToString() == &quot;0&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;io_curRow += i;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if(i ==  in_dt.Rows.Count - 1) {&#xA;&#x9;&#x9;io_curRow += i;&#xA;&#x9;}&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="444,174" sap2010:WorkflowViewState.IdRef="InvokeCode_10" Language="CSharp">
                                  <ui:InvokeCode.Arguments>
                                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dt">
                                      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_156">tempDt</CSharpValue>
                                    </InArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_curRow">
                                      <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_34">curRow</CSharpReference>
                                    </InOutArgument>
                                  </ui:InvokeCode.Arguments>
                                </ui:InvokeCode>
                                <ueab:FindFirstLastDataRowX FirstRowIndex="{x:Null}" BlankRowsToSkip="10" ColumnName="W" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowOffset="0" HasHeaders="False" sap:VirtualizedContainerService.HintSize="444,313" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_2" LastRowOffset="0">
                                  <ueab:FindFirstLastDataRowX.LastRowIndex>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_35">lastRowKho</CSharpReference>
                                    </OutArgument>
                                  </ueab:FindFirstLastDataRowX.LastRowIndex>
                                  <ueab:FindFirstLastDataRowX.Range>
                                    <InArgument x:TypeArguments="ue:IReadRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_157">Excel.Sheet["Final"]</CSharpValue>
                                    </InArgument>
                                  </ueab:FindFirstLastDataRowX.Range>
                                </ueab:FindFirstLastDataRowX>
                                <ueab:ReadRangeX DisplayName="Read Range" HasHeaders="False" sap:VirtualizedContainerService.HintSize="444,178" sap2010:WorkflowViewState.IdRef="ReadRangeX_2" VisibleOnly="False">
                                  <ueab:ReadRangeX.Range>
                                    <InArgument x:TypeArguments="ue:IReadRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_167">Excel.Sheet["Final"].Range["W" + curRow + ":AC" + lastRowKho]</CSharpValue>
                                    </InArgument>
                                  </ueab:ReadRangeX.Range>
                                  <ueab:ReadRangeX.SaveTo>
                                    <OutArgument x:TypeArguments="sd:DataTable">
                                      <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_37">dt</CSharpReference>
                                    </OutArgument>
                                  </ueab:ReadRangeX.SaveTo>
                                </ueab:ReadRangeX>
                                <ueab:WriteRangeX DisplayName="Write DataTable to Excel" ExcludeHeaders="True" sap:VirtualizedContainerService.HintSize="444,168" sap2010:WorkflowViewState.IdRef="WriteRangeX_12" IgnoreEmptySource="False">
                                  <ueab:WriteRangeX.Destination>
                                    <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_169" xml:space="preserve">Excel.Sheet["Final"].Range["W" + (curRow+1).ToString()  + ":AC" + (lastRowKho + 1).ToString()]</CSharpValue>
                                    </InArgument>
                                  </ueab:WriteRangeX.Destination>
                                  <ueab:WriteRangeX.Source>
                                    <InArgument x:TypeArguments="sd:DataTable">
                                      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_168">dt</CSharpValue>
                                    </InArgument>
                                  </ueab:WriteRangeX.Source>
                                </ueab:WriteRangeX>
                                <Assign sap:VirtualizedContainerService.HintSize="444,70" sap2010:WorkflowViewState.IdRef="Assign_3">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_36">curRow</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_161">curRow + 1</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </ui:InterruptibleWhile.Body>
                            <ui:InterruptibleWhile.Condition>
                              <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_142">curRow &lt;= lastRow</CSharpValue>
                            </ui:InterruptibleWhile.Condition>
                          </ui:InterruptibleWhile>
                        </Sequence>
                      </ActivityAction>
                    </ueab:ExcelApplicationCard.Body>
                    <ueab:ExcelApplicationCard.WorkbookPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_135" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
                      </InArgument>
                    </ueab:ExcelApplicationCard.WorkbookPath>
                  </ueab:ExcelApplicationCard>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelProcessScopeX.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ueab:ExcelProcessScopeX>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="400,113" sap2010:WorkflowViewState.IdRef="Sequence_48">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="CommentOut_6">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="626,1064" sap2010:WorkflowViewState.IdRef="Sequence_35">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="564,942" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_10">
            <ueab:ExcelProcessScopeX.Body>
              <ActivityAction x:TypeArguments="ui:IExcelProcess">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                </ActivityAction.Argument>
                <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="530,846" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_9" ResizeWindow="None">
                  <ueab:ExcelApplicationCard.Body>
                    <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,568" sap2010:WorkflowViewState.IdRef="Sequence_31">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ueab:WriteRangeX DisplayName="Write DataTable to Excel" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteRangeX_11" IgnoreEmptySource="False">
                          <ueab:WriteRangeX.Destination>
                            <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                              <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_127">Excel.Sheet["Sheet1"].Range["A1"]</CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Destination>
                          <ueab:WriteRangeX.Source>
                            <InArgument x:TypeArguments="sd:DataTable">
                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_125">newDt</CSharpValue>
                            </InArgument>
                          </ueab:WriteRangeX.Source>
                        </ueab:WriteRangeX>
                        <ueab:DeleteSheetX DisplayName="Delete Sheet" sap:VirtualizedContainerService.HintSize="434,99" sap2010:WorkflowViewState.IdRef="DeleteSheetX_1">
                          <ueab:DeleteSheetX.Sheet>
                            <InArgument x:TypeArguments="ue:ISheetRef">
                              <CSharpValue x:TypeArguments="ue:ISheetRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_129">Excel.Sheet["SoPhu"]</CSharpValue>
                            </InArgument>
                          </ueab:DeleteSheetX.Sheet>
                        </ueab:DeleteSheetX>
                        <ueab:DeleteSheetX DisplayName="Delete Sheet" sap:VirtualizedContainerService.HintSize="434,99" sap2010:WorkflowViewState.IdRef="DeleteSheetX_2">
                          <ueab:DeleteSheetX.Sheet>
                            <InArgument x:TypeArguments="ue:ISheetRef">
                              <CSharpValue x:TypeArguments="ue:ISheetRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_130">Excel.Sheet["Kho"]</CSharpValue>
                            </InArgument>
                          </ueab:DeleteSheetX.Sheet>
                        </ueab:DeleteSheetX>
                      </Sequence>
                    </ActivityAction>
                  </ueab:ExcelApplicationCard.Body>
                  <ueab:ExcelApplicationCard.WorkbookPath>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_124" xml:space="preserve">in_Folder + "\\T" + DateTime.Now.AddMonths(-1).Month + "_" + DateTime.Now.AddMonths(-1).Year +  "_SMS"</CSharpValue>
                    </InArgument>
                  </ueab:ExcelApplicationCard.WorkbookPath>
                </ueab:ExcelApplicationCard>
              </ActivityAction>
            </ueab:ExcelProcessScopeX.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ueab:ExcelProcessScopeX>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="CommentOut_2">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="724,1182" sap2010:WorkflowViewState.IdRef="Sequence_23">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ForEach x:TypeArguments="sd:DataTable" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="662,1060" sap2010:WorkflowViewState.IdRef="ForEach`1_5">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="sd:DataTable">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="sd:DataTable" Name="table" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="626,927" sap2010:WorkflowViewState.IdRef="Sequence_20">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="564,805" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_5">
                    <ueab:ExcelProcessScopeX.Body>
                      <ActivityAction x:TypeArguments="ui:IExcelProcess">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                        </ActivityAction.Argument>
                        <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="530,709" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_5" ResizeWindow="None">
                          <ueab:ExcelApplicationCard.Body>
                            <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,431" sap2010:WorkflowViewState.IdRef="Sequence_17">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,101" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Trace">
                                  <ui:LogMessage.Message>
                                    <InArgument x:TypeArguments="x:Object">
                                      <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_89">DateTime.Now.ToString("hh:mm:ss") + ": Write file " + table.TableName + ".xlsx"</CSharpValue>
                                    </InArgument>
                                  </ui:LogMessage.Message>
                                </ui:LogMessage>
                                <ueab:WriteRangeX DisplayName="Write DataTable to Excel" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteRangeX_7" IgnoreEmptySource="False">
                                  <ueab:WriteRangeX.Destination>
                                    <InArgument x:TypeArguments="ue:IReadWriteRangeRef">
                                      <CSharpValue x:TypeArguments="ue:IReadWriteRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_90">Excel.Sheet["Sheet1"]</CSharpValue>
                                    </InArgument>
                                  </ueab:WriteRangeX.Destination>
                                  <ueab:WriteRangeX.Source>
                                    <InArgument x:TypeArguments="sd:DataTable">
                                      <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_91">table</CSharpValue>
                                    </InArgument>
                                  </ueab:WriteRangeX.Source>
                                </ueab:WriteRangeX>
                              </Sequence>
                            </ActivityAction>
                          </ueab:ExcelApplicationCard.Body>
                          <ueab:ExcelApplicationCard.WorkbookPath>
                            <InArgument x:TypeArguments="x:String">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_92">in_Folder +"\\"+table.TableName + ".xlsx"</CSharpValue>
                            </InArgument>
                          </ueab:ExcelApplicationCard.WorkbookPath>
                        </ueab:ExcelApplicationCard>
                      </ActivityAction>
                    </ueab:ExcelProcessScopeX.Body>
                  </ueab:ExcelProcessScopeX>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <ui:ForEach.Values>
              <InArgument x:TypeArguments="sc:IEnumerable">
                <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_88">tables</CSharpValue>
              </InArgument>
            </ui:ForEach.Values>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
  </Sequence>
</Activity>